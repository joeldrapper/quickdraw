#!/usr/bin/env ruby
# frozen_string_literal: true

class Path
	def self.coerce(path)
		segments = path.split("/").map(&:freeze)
		file = segments.pop.split(".").map(&:freeze)

		new(segments.freeze, file.freeze)
	end

	def initialize(segments, file)
		@segments = segments
		@file = file
		freeze
	end

	def exists?
		File.exist?(to_s)
	end

	def to_s
		"#{directory}/#{file_with_extensions}".freeze
	end

	def [](index)
		@segments[index]
	end

	def file_name
		@file.first
	end

	def file_extension
		@file.last
	end

	def file_extensions
		@file[1..-1]
	end

	def directory
		@segments.join("/").freeze
	end

	def file_with_extensions
		@file.join(".").freeze
	end

	def full_path_without_extension
		"#{directory}/#{file_name}".freeze
	end

	def neighbouring_ruby_files
		Dir["#{directory}/**/*.rb"].tap do |paths|
			paths.delete_at(paths.index(to_s))
		end
	end

	def drop(n)
		segment = @segments.dup
		dropped = segment.unshift(n)

		[
			dropped.join("/"),
			self.class.new(segment.freeze, @file),
		].freeze
	end
end

class Resolver
	TestDirectories = Set["test", "spec", "tests", "specs", "quickdraw"]
	CurrentDirectoryName = File.basename(Dir.pwd)

	def self.call(path)
		unless path.exists?
			raise "The original path doesnâ€™t exist."
		end

		new(path).resolve
	end

	def initialize(path)
		@path = path
	end

	def resolve
		puts @path
		if TestDirectories.include?(@path[0])
			from_test_file_in_test_directory
		elsif @path.file_extensions.include?("test")
			from_neighbouring_test_file
		else
			implementation_file
		end
	end

	private

	def from_test_file_in_test_directory
		test_directory, rest = @path.drop(1)

		bases = [
			"lib/#{CurrentDirectoryName}",
			"app",
			"lib",
			"src",
			"src/#{CurrentDirectoryName}",
		]

		bases.each do |base|
			launch base + rest.to_s
		end

		items = Dir["**/*.rb"].reject do |path|
			path.end_with?(".test.rb") || TestDirectories.include?(path.split("/").first)
		end

		results = search(
			items:,
			query: rest.full_path_without_extension
		)

		launch results.first if results.any?
	end

	def from_neighbouring_test_file
		results = search(
			items: @path.neighbouring_ruby_files,
			query: @path.full_path_without_extension
		)

		launch results.first if results.any?
	end

	def implementation_file
		launch @path.full_path_without_extension + ".test.rb"

		TestDirectories.select { |dir| Dir.exist?(dir) }.each do |dir|
			results = search(
				items: Dir["#{dir}/**/*.rb"],
				query: @path.full_path_without_extension
			)

			launch results.first if results.any?
		end
	end

	def launch(path)
		if File.exist?(path.to_s)
			exec "#{ENV.fetch('EDITOR', 'zed')} #{path}"
		else
			false
		end
	end

	def search(items:, query:)
		items.sort_by { |item| -n_common_trigrams(item, query) }
	end

	def levenshtein_distance(left, right)
		return right.size if left.empty?
		return left.size if right.empty?

		left, right = right, left if left.size > right.size

		distances = (0..right.size).to_a

		left.each_char.with_index(1) do |left_char, left_index|
			previous_diagonal = distances[0]
			distances[0] = left_index

			right.each_char.with_index(1) do |right_char, right_index|
				temp = distances[right_index]
				cost = (left_char == right_char) ? 0 : 1

				distances[right_index] = [
					distances[right_index - 1] + 1, # insertion
					distances[right_index] + 1,     # deletion
					previous_diagonal + cost,       # substitution
				].min

				previous_diagonal = temp
			end
		end

		distances[-1]
	end

	def n_common_trigrams(left, right)
		left_len = left.length
		right_len = right.length

		return 0 if left_len < 3 || right_len < 3

		# Process shorter string first
		if left_len > right_len
			left, right = right, left
			left_len, right_len = right_len, left_len
		end

		# Use a Set for lookup
		trigrams = Set.new
		count = 0

		# Generate trigrams from shorter string
		i = 0
		left_max = left_len - 2
		while i < left_max
			trigram = left[i, 3]
			trigrams.add(trigram)
			i += 1
		end

		# Check trigrams from longer string
		i = 0
		right_max = right_len - 2
		while i < right_max
			count += 1 if trigrams.include?(right[i, 3])
			i += 1
		end

		count
	end
end

Resolver::(
	Path.coerce(ARGV.first)
)
