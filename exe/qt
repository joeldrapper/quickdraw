#!/usr/bin/env ruby
# frozen_string_literal: true

require "bootsnap"

Bootsnap.setup(
	cache_dir: "tmp/cache", # Path to your cache
	ignore_directories: ["node_modules"], # Directory names to skip
	development_mode: true,
	load_path_cache: true, # Optimize the LOAD_PATH with a cache
	compile_cache_iseq: true, # Compile Ruby code into ISeq cache, breaks coverage reporting
	compile_cache_yaml: true, # Compile YAML into a cache
	compile_cache_json: true, # Compile JSON into a cache
	readonly: false, # Use the caches but don't update them on miss or stale entries
)

module Quickdraw
	start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)

	require "optparse"
	require_relative "../lib/quickdraw"

	watch, processes, threads, seed, covered = nil

	OptionParser.new do |parser|
		parser.banner = "Usage: bundle exec qt [options]"

		parser.on("-h", "--help", "Prints this help") do
			puts parser
			exit
		end

		parser.on("-p N", "--processes N", Integer, "Number of Ruby Processes to fork") do |it|
			if Process.respond_to?(:fork)
				processes = it
			else
				warn "Forking processes is not supported on this platform."
				exit 1
			end
		end

		parser.on("-m", "--max", "Use all available CPU cores") do
			if processes
				warn "You cannot use the max flag with the processes flag."
				exit 1
			end

			processes = Platform.cpu_cores
		end

		parser.on("-e", "--efficiency", "Use efficiency cores (Apple M-series Macs only)") do
			if Platform.m_series?
				if processes
					warn "You cannot use the efficiency flag with the processes flag."
					exit 1
				end

				processes = Platform.efficiency_cores
				`taskpolicy -b -p #{Process.pid}`
			else
				puts "Efficiency cores are only available on M-series Macs."
				exit 1
			end
		end

		parser.on("-w", "--watch", "Watch for changes") do
			if Platform.supports_forking?
				watch = true
			else
				warn "You cannot use the watch mode on this platform because forking processes is not supported."
				exit 1
			end
		end

		parser.on("-t N", "--threads N", Integer, "Number of Threads per Process") do |it|
			threads = it
		end

		parser.on("-s N", "--seed N", Integer, "Seed for randomization") do |it|
			seed = it
		end

		parser.on("-c", "--coverage", "Generate coverage report") do
			begin
				require "covered/config"
			rescue LoadError
				warn "You must add the `covered` gem to your Gemfile to use the coverage flag."
				exit 1
			end

			covered = Covered::Config.load
		end
	end.parse!

	files = Dir.glob(ARGV[0] || "./**/*.test.rb")
	configuration_path = File.expand_path("config/quickdraw.rb")

	if watch
		file_mtimes = {}

		files.each do |file|
			file_mtimes[file] = File.mtime(file)
		end

		loop do
			sleep 0.01
			files.each do |file|
				next unless File.mtime(file) > file_mtimes[file]

				print "\033[2J\033[H"
				file_mtimes[file] = File.mtime(file)

				time = Quickdraw::Timer.time do
					pid = Process.fork do
						require configuration_path if File.exist?(configuration_path)

						Quickdraw::Run.new(
							processes: processes || Quickdraw::Config.processes,
							threads: threads || Quickdraw::Config.threads,
							files: [file],
							seed: seed || Random.new_seed
						).call
					end

					Process.wait(pid)
				end

				puts "Total time: #{time}"
			end
		end
	else
		require configuration_path if File.exist?(configuration_path)

		covered&.start

		Quickdraw::Run.new(
			processes: processes || Quickdraw::Config.processes,
			threads: threads || Quickdraw::Config.threads,
			files:,
			seed: seed || Random.new_seed
		).call

		if covered
			covered.finish
			covered.call($stdout)
		end
	end

	finish = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
	puts "Total time: #{Quickdraw::Timer::Duration.new(finish - start)}"
end
